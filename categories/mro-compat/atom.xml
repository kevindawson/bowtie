<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MRO::Compat | The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/categories/mro-compat/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2014-03-22T23:04:40+00:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[bowtie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mro - MRO::Compat catch]]></title>
    <link href="http://kevindawson.github.io/bowtie/2014/03/22/app-midgen-010/"/>
    <updated>2014-03-22T14:40:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2014/03/22/app-midgen-010</id>
    <content type="html"><![CDATA[<h2>Your scanner is missing a heuristic exception&hellip; issue#6</h2>

<ul>
<li>issue #6</li>
<li>The Catch</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3><a href="https://github.com/kevindawson/App-Midgen/issues/6">issue #6</a>.</h3>

<p>When doing a check for the minimum perl version that should be specified in the ToolChain.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code snippet showing a typical usage of MRO::Compact </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># use Module::Runtime to work around the 5.8 require bugs</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="vg">$]</span> <span class="o">&amp;</span><span class="ow">lt</span><span class="p">;</span> <span class="mf">5.009_005</span><span class="p">)</span> <span class="p">{</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="nn">Module::Runtime::</span><span class="n">require_module</span><span class="p">(</span><span class="s">&#39;MRO::Compat&#39;</span><span class="p">);</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="nb">require</span> <span class="n">mro</span><span class="p">;</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Both of these modules</p>

<pre><code>Perl::MinimumVersion
Perl::MinimumVersion::Fast
</code></pre>

<p>Think that finding <strong>require mro</strong> syntax, means that the perl-minversion should be set to perl 5.010000</p>

<h4>Why this is stupid?</h4>

<p>Because they both completely ignore the presence of <strong>MRO::Compat</strong> and it&rsquo;s use.</p>

<p><blockquote><p>The &ldquo;mro&rdquo; namespace provides several utilities for dealing with method resolution order and method caching in general in Perl 5.9.5 and higher.</p></p><p><p>This module provides those interfaces for earlier versions of Perl (back to 5.6.0 anyways).</p></p><p><p>It is a harmless no-op to use this module on 5.9.5+. That is to say, code which properly uses MRO::Compat will work unmodified on both older Perls and 5.9.5+.</p></p><p><p>If you&rsquo;re writing a piece of software that would like to use the parts of 5.9.5+&rsquo;s mro:: interfaces that are supported here, and you want compatibility with older Perls, this is the module for you.</p><footer><strong>MRO::Compat</strong> <cite>POD <a href="https://metacpan.org/pod/MRO::Compat#DESCRIPTION">https://metacpan.org/pod/MRO::Compat#DESCRIPTION</a></cite></footer></blockquote></p>

<p>Many thanks to the #toolchain for showing me the light.</p>

<h3>The Catch</h3>

<h4>Now for some heuristics :)</h4>

<ul>
<li>Scan dist for meta-2 phase-requirements

<ul>
<li>mro &ndash;> RuntimeRequires</li>
<li>MRO::Compat &ndash;> RuntimeRecommends</li>
</ul>
</li>
<li>Check module for perl-minversion (pmv)</li>
<li>skip pmv if ( pmv blame = require mro; &ndash;> 5.010 &amp;&amp; module contains MRO::Compat )

<ul>
<li>if output format meta-1.x recast MRO::Compat to requires (RuntimeRequires)</li>
</ul>
</li>
</ul>


<p>The following is the result of <code>midgen -f mi</code></p>

<p><img src="/images/010_midgen_0.31_05.png"></p>

<p>nb: midgen v0.31_05 in GitHub</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
</feed>
