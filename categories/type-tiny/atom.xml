<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Type::Tiny | The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/categories/type-tiny/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2014-04-08T20:54:51+01:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[bowtie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.26]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007/"/>
    <updated>2013-07-25T14:40:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007</id>
    <content type="html"><![CDATA[<h2>So what’s new?</h2>

<ul>
<li>Added Two more output formats:

<ul>
<li>infile, output format, module v perl files they were Found in</li>
<li>metajson, output format META.json</li>
</ul>
</li>
<li>Internal scanner update and why</li>
<li>Finish off conversion to Type::Tiny</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3>Two new output formats:</h3>

<h4>infile</h4>

<p>The following was conceived to provided a solution to <a href="https://rt.cpan.org/Public/Bug/Display.html?id=76527">RT76527</a>.</p>

<p><code>midgen --format infile</code></p>

<p>{% codeblock Output Format infile run against a test dist lang:text %}</p>

<hr />



<hr />

<p> | Bar                   | 0.2      | /lib/Anamal.pm     |
 | Carp::Always::Color   | 0        | /lib/Anamal.pm     |
 | Compiler::Lexer       | 0        | /lib/Anamal.pm     |
 | Data::Printer         | 0        | /lib/Anamal.pm     |
 | Foo                   | 0.123456 | /lib/Anamal.pm     |
 | Moo                   | 1.000    | /lib/Anamal.pm     |
 | Moo                   | 0.999    | /lib/Plugin/Dog.pm |
 | Moo                   | 0.888    | /lib/Plugin/Cat.pm |
 | Params::Util          | 0        | /lib/Anamal.pm     |
 | String::RewritePrefix | 0.005    | /lib/Anamal.pm     |
 | Test::Mock::LWP       | 0        | /t/666-tmw.t       |
 | Test::Mock::LWP       | 0        | /t/00.load.t       |
 | Test::More            | 0        | /t/pod.t           |
 | Test::More            | 0        | /t/pod-coverage.t  |
 | Test::More            | 0        | /t/666-tmw.t       |
 | Test::More            | 0        | /t/00.load.t       |
 | Test::Pod             | 0        | /t/pod.t           |
 | Test::Pod::Coverage   | 0        | /t/pod-coverage.t  |
 | Types::Standard       | 0        | /lib/Anamal.pm     |
 | X                     | 0        | /lib/Anamal.pm     |</p>

<hr />

<p>{% endcodeblock %}</p>

<p>NB: this is the only output format which displays the found version string, because it just makes sense in this instance.
Many thanks to ETHER along the way.</p>

<h4>metajson</h4>

<p>The following is what midgen thinks your <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> might contain based upon your dist, or in this case a test dist.</p>

<p><code>midgen --format metajson</code></p>

<p>{% img /images/007-metajson.png %}</p>

<h3>Internal Scanner update</h3>

<p>These scanners enable midgen to identify <em>prereqs->test->suggests</em> from a <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> perspective.</p>

<p>Here is a <a href="/images/007-flow_chart.png">flow chart</a> that should help with why.</p>

<p>Many thanks to TOBYINK for his <a href="https://github.com/kevindawson/App-Midgen/issues/5">critique</a> which resulted in the following taking another step forward.</p>

<h4>Eval new scanner</h4>

<p>Eval is not realy a new scanner, it&rsquo;s just come of age with block support.
{% codeblock A selection of what Eval supports lang:perl %}
eval &ldquo;use Test::Kwalitee::Extra 0.000007&rdquo;;
eval &ldquo;use Moo 1.002; 1;&rdquo;;
eval { no Moose; 1; };
eval { require Moose };
my $HAVE_MOOSE = eval { require Moose; 1; };
{% endcodeblock %}</p>

<h4>Test::Requires update</h4>

<p>Support for barewords in Test::Requires scanner
{% codeblock Now supports barewords in Test::Requires lang:perl %}
use Test::Requires { Moo };
use Test::Requires { Moose => &lsquo;2.000&rsquo; };
{% endcodeblock %}</p>

<h3>Finish off conversion to Type::Tiny</h3>

<p>Why? one, so I can have a consistent Type system regardless of Moose or Moo, two, it&rsquo;s faster.
The Second part of the conversion from MooX::Types::MooseLike to Type::Tiny.</p>

<p>So we have gone from this:</p>

<p>{% codeblock lang:perl %}
use Moo::Role;
use MooX::Types::MooseLike::Base qw( InstanceOf );
{% endcodeblock %}</p>

<p>To this:</p>

<p>{% codeblock lang:perl %}
use Types::Standard qw( InstanceOf );
use Moo::Role;
{% endcodeblock %}</p>

<p>Many thanks to TOBYINK along the way.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.24]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006/"/>
    <updated>2013-06-04T18:18:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006</id>
    <content type="html"><![CDATA[<h2>So what’s new?</h2>

<ul>
<li>Some extra speed taking advantage of some new developments in:

<ul>
<li>PPI::XS</li>
<li>Perl::MinimumVersion::Fast</li>
</ul>
</li>
<li>Re-factor the Output formats to composed Roles</li>
<li>Start of conversion to Type::Tiny</li>
</ul>


<!-- more -->


<h3>Some extra speed taking advantage of some new developments in:</h3>

<h4>PPI::XS</h4>

<p>Now that PPI-XS has been updated (Fix &ldquo;defined @array&rdquo; deprecation warning) DAGOLDEN++. We can turn off the noise suppression and add it as a dependency if your OS <code>can_cc</code>. Not much of a boost but anything here is a benefit.</p>

<h4>Perl::MinimumVersion::Fast</h4>

<p>Perl::MinimumVersion::Fast TOKUHIROM++ is built on top of Compiler::Lexer GOCCY++, this is <strong>quick</strong>. This enables us to check all perl modules rather than the subset we extract when looking for a Package Name. Due to it being such a cool new module, we will fall back to Perl::MinimumVersion if your OS <code>!can_cc</code>.</p>

<h3>Re-factor the Output formats to Composed Roles</h3>

<p>Inspired by the Composed Method Theory, I thought why not have a Composed Role, for the output formats, with each format type being a separate Role, so I did.</p>

<p>{% codeblock Output Format Composed Roles lang:perl %}
use Moo::Role;
with qw(</p>

<pre><code>App::Midgen::Role::Output::MIdsl
App::Midgen::Role::Output::MI
App::Midgen::Role::Output::MB
App::Midgen::Role::Output::Dzil
App::Midgen::Role::Output::Dist
App::Midgen::Role::Output::CPANfile
</code></pre>

<p>);
{% endcodeblock %}</p>

<h3>Start of conversion to Type::Tiny</h3>

<p>Why, one so I can have a consistent Type system regardless of Moose or Moo, two it&rsquo;s faster.
The first part of the conversion from MooX::Types::MooseLike to Type::Tiny</p>

<p>So we have gone from this:</p>

<p>{% codeblock lang:perl %}
use Moo::Role;
use MooX::Types::MooseLike::Base qw(:all);
{% endcodeblock %}</p>

<p>To this:</p>

<p>{% codeblock lang:perl %}
use Types::Standard qw( ArrayRef Bool Int Object Str);
use Moo::Role;
{% endcodeblock %}</p>

<p>Many thanks to TOBYINK along the way, the final part will happen soon.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
</feed>
