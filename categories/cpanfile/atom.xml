<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cpanfile | The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/categories/cpanfile/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2013-07-31T10:52:52+01:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[bowtie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.22]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005/"/>
    <updated>2013-05-09T19:29:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Switched output format type from <strong>build</strong> to <strong>mb</strong></li>
<li>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories

<ul>
<li>Find modules in Test::Requires blocks</li>
<li>Find modules in use_ok BEGIN blocks</li>
</ul>
</li>
<li>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</li>
</ul>


<!-- more -->


<h3>Switched output format type from <strong>build</strong> to <strong>mb</strong></h3>

<pre><code>midgen -f mb
</code></pre>

<p>Thanks for the kick azawawi++</p>

<h3>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories</h3>

<p>We can now find the following located in your test files, then display in the revelant section in your chose output format.</p>

<h4>Find modules in <strong>Test::Requires</strong> blocks</h4>

<p>Example 1</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Here&rsquo;s a selection of Test::Requires </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Test::</span><span class="n">Pod</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Test::</span><span class="n">Extra</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw[MIME::Types]</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw(IO::Handle::Util LWP::Protocol::http10)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nn">Test::</span><span class="n">Test1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">1.01</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Test::</span><span class="n">Test2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mf">2.02</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Find modules in <strong>use_ok</strong> BEGIN blocks</h4>

<p>Example 2</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Here&rsquo;s a selection of ues_ok in BEGIN block </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Term::</span><span class="n">ReadKey</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">2.30</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Term::</span><span class="n">ReadLine</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">1.10</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Fred::</span><span class="n">BloggsOne</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">1.01</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nn">Fred::</span><span class="n">BloggsTwo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">2.02</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nn">Fred::</span><span class="n">BloggsThree</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mf">3.03</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</h3>

<pre><code>~/GitHub/Plack$ midgen -lf cpanfile
</code></pre>

<p><img src="/images/005-example-03.png"></p>

<ul>
<li>The above shows <strong>requires</strong> from ( use, require, no, use_ok, &hellip; )</li>
<li>The <strong>suggests</strong> come from ( Test::Requires )</li>
</ul>


<p><strong>nb</strong> <em>the !mcpan are modules from the local test framework</em> hence they don&rsquo;t exist :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, update notice + some colour]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004/"/>
    <updated>2013-04-04T20:08:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004</id>
    <content type="html"><![CDATA[<p>Switched output format type from cfile to cpanfile</p>

<pre><code>midgen -f cpanfile
</code></pre>

<p>Thanks for the kick Miyagawa++</p>

<!-- more -->


<p>NB, if you have written an <code>.midgenrc</code> file suggest you either edit it or delete it and start again, opps.</p>

<p>Thought I would show you all the colour</p>

<ul>
<li>yellow module version</li>
<li>bright-yellow dual-life module version</li>
<li>cyan module no version, so showing it&rsquo;s distribution version</li>
</ul>


<p><img src="/images/midgen_001.png"></p>

<p>All version numbers from MetaCPAN</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, now with cpanfile prereqs]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003/"/>
    <updated>2013-04-03T23:32:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003</id>
    <content type="html"><![CDATA[<h2>More features</h2>

<p><strong>cpanfile output format, prereqs (requires, recommends, on test, on develop)</strong></p>

<pre><code>midgen -lf cfile
</code></pre>

<ul>
<li>Basic scanning of Dist-Zilla Plugins</li>
</ul>


<p>Here is a sample, <a href="https://github.com/kevindawson/App-Midgen/wiki/Milla">with cpanfile and dist-zilla plugins</a>, see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a> for more examples.</p>
]]></content>
  </entry>
  
</feed>
