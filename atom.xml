<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2014-03-24T18:09:25+00:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[bowtie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mro - MRO::Compat catch]]></title>
    <link href="http://kevindawson.github.io/bowtie/2014/03/22/app-midgen-010/"/>
    <updated>2014-03-22T14:40:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2014/03/22/app-midgen-010</id>
    <content type="html"><![CDATA[<h2>Your scanner is missing a heuristic exception&hellip; issue#6</h2>

<ul>
<li>issue #6</li>
<li>The Catch</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3><a href="https://github.com/kevindawson/App-Midgen/issues/6">issue #6</a>.</h3>

<p>When checking for the minimum perl version, each module in a distribution is checked in turn and the highest requirement returned. The blame ( explicit|syntax|external ) is available to check. The following typical code snippet causes confusion.</p>

<figure class='code'><figcaption><span>Code snippet showing a typical usage of MRO::Compact </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># use Module::Runtime to work around the 5.8 require bugs</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="vg">$]</span> <span class="o">&lt;</span> <span class="mf">5.009_005</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nn">Module::Runtime::</span><span class="n">require_module</span><span class="p">(</span><span class="s">&#39;MRO::Compat&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">require</span> <span class="n">mro</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both of these available modules have the same problem.</p>

<pre><code>Perl::MinimumVersion
Perl::MinimumVersion::Fast
</code></pre>

<p>Think that finding <strong>require mro</strong> syntax, means that the perl-minversion should be set to perl 5.010000</p>

<p>NB. <code>perlmin .</code> or <code>perlmin-fast lib/module/name</code></p>

<h4>Why this is stupid?</h4>

<p>Because they both completely ignore the presence of <strong>MRO::Compat</strong> and it&rsquo;s use.</p>

<blockquote><p>The &#8220;mro&#8221; namespace provides several utilities for dealing with method resolution order and method caching in general in Perl 5.9.5 and higher.</p><p>This module provides those interfaces for earlier versions of Perl (back to 5.6.0 anyways).</p><p>It is a harmless no-op to use this module on 5.9.5+. That is to say, code which properly uses MRO::Compat will work unmodified on both older Perls and 5.9.5+.</p><p>If you&#8217;re writing a piece of software that would like to use the parts of 5.9.5+&#8217;s mro:: interfaces that are supported here, and you want compatibility with older Perls, this is the module for you.</p><footer><strong>MRO::Compat, POD</strong> <cite><a href='https://metacpan.org/pod/MRO::Compat#DESCRIPTION'>metacpan.org/pod/&hellip;</a></cite></footer></blockquote>


<p>Many thanks to ribasushi++ for showing me the light.</p>

<h3>The Catch</h3>

<h4>Now for some heuristics :)</h4>

<ul>
<li>Scan dist for meta-2 phase-requirements

<ul>
<li>mro &ndash;> RuntimeRequires</li>
<li>MRO::Compat &ndash;> RuntimeRecommends</li>
</ul>
</li>
<li>Check module for perl-minversion (pmv)</li>
<li>skip pmv if ( pmv blame = require mro; &ndash;> 5.010 &amp;&amp; module contains MRO::Compat )

<ul>
<li>if output format meta-1.x recast MRO::Compat to requires (RuntimeRequires)</li>
</ul>
</li>
</ul>


<p>The following is the result of <code>midgen -f mi</code> showing meta-1.x format
<img src="http://kevindawson.github.io/bowtie/images/010-midgen_001.png" title="midgen -f mi" ></p>

<p>The following is the result of <code>midgen -f metajson</code> showing meta-2.x format
<img src="http://kevindawson.github.io/bowtie/images/010-midgen_002.png" title="midgen -f metajson" ></p>

<p>nb: midgen v0.31_05 in GitHub</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[midgen 0.28 plus]]></title>
    <link href="http://kevindawson.github.io/bowtie/2014/02/16/app-midgen-009/"/>
    <updated>2014-02-16T14:40:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2014/02/16/app-midgen-009</id>
    <content type="html"><![CDATA[<h2>Update</h2>

<ul>
<li>Flowchart</li>
<li>infile &ndash; Installed</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3>Flowchart</h3>

<h4>now extracting RuntimeRecommends</h4>

<p>The following is the current logic of what midgen is doing and the order it dose it in. All internals now follow the meta-2 phase-requirements naming as and where applicable for clarity.</p>

<p><img src="http://kevindawson.github.io/bowtie/images/009-midgen_002.png"></p>

<h3>infile &ndash; Installed</h3>

<p>This enharcment to output infile to include Installed was suggested by mst++</p>

<ul>
<li>Installed &ndash; found in <strong>@INC</strong> not in the distribution we are scanning.</li>
<li>Version &ndash; found in module includes within your distribution ( use Module::Name 0.123; )</li>
</ul>


<p>In the end I opted for some color: Missing in red ether++</p>

<p>The following is the result of <code>midgen -f infile</code>
<img src="http://kevindawson.github.io/bowtie/images/009-midgen_003.png" title="midgen -f infile" ></p>

<p>NB: I always work with &lsquo;White on Black&rsquo;</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.28]]></title>
    <link href="http://kevindawson.github.io/bowtie/2014/02/08/app-midgen-008/"/>
    <updated>2014-02-08T14:40:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2014/02/08/app-midgen-008</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Now with support for <code>prereqs-&gt;runtime-&gt;recommends</code> Meta-CPAN-spec v2</li>
<li>Internal scanner update and why

<ul>
<li>New scanner <strong>UseModule</strong>, Module::Runtime support</li>
<li>Scanner <strong>Eval</strong> now supports <strong>try</strong> Blocks as well.</li>
<li>Internal scanners now provide version strings, used by <strong>infile</strong>, output format</li>
</ul>
</li>
<li>Changes to the output formats:

<ul>
<li>Output format, <strong>eumm</strong>, added for ExtUtils::MakeMaker (enabling &ndash;> META.json)</li>
<li>Updates to <strong>metacpan</strong> &amp;&amp; <strong>cpanfile</strong> to show <code>prereqs-&gt;runtime-&gt;recommends</code></li>
</ul>
</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3>Internal Scanner update</h3>

<p>The internal scanners now all return version strings if present, which is being utilized by the <strong>infile</strong> output format initially.</p>

<p>Bug: only return Module::Name that start with first character upper OLIVER++, Fixed</p>

<h4>UseModule new scanner</h4>

<p>Following on from a suggestion from mst on #toolchain to support Module::Runtime includes, has turned in to a new scanner <strong>UseModule</strong>.</p>

<p>Checking for the following, extracting module name and version strings.</p>

<figure class='code'><figcaption><span>A selection of what UseModule supports </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">use_module</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'><span class="n">require_module</span><span class="p">(</span> <span class="s">&#39;Module::Name&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">use_package_optimistically</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$abc</span> <span class="o">=</span> <span class="n">use_module</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$abc</span> <span class="o">=</span> <span class="n">use_package_optimistically</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$abc</span> <span class="o">=</span> <span class="n">use_module</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'><span class="nv">$abc</span> <span class="o">=</span> <span class="n">use_package_optimistically</span><span class="p">(</span><span class="s">&quot;Module::Name&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">use_module</span><span class="p">(</span> <span class="s">&#39;Module::Name&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span><span class="n">xx</span> <span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">use_package_optimisticall</span><span class="p">(</span> <span class="s">&#39;Module::Name&#39;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">xx</span> <span class="p">)</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="o">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$HAVE_MOOSE</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also support the prefix <code>Module::Runtime::...</code> in the above.</p>

<h4>Eval now supports try</h4>

<p>Eval is not realy a new scanner, it&rsquo;s just come of age with block and <strong>try</strong> support.</p>

<figure class='code'><figcaption><span>A selection of what Eval supports </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span><span class="k">use</span> <span class="nn">Test::Kwalitee::</span><span class="n">Extra</span> <span class="mf">0.000007</span><span class="p">};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span><span class="k">use</span> <span class="n">Moo</span> <span class="mf">1.002</span><span class="p">;</span> <span class="mi">1</span><span class="p">;};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">no</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span> <span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$HAVE_MOOSE</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">try</span> <span class="p">{</span> <span class="nb">no</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="n">try</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span> <span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$HAVE_MOOSE</span> <span class="o">=</span> <span class="n">try</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bug: Catch for postfix <strong>if</strong>, Fixed</p>

<p><code>require MRO::Compat if $] &lt; 5.009_005;</code></p>

<h3>Output formats:</h3>

<p>To show the use of UseModule and Eval in the examples below.</p>

<p>Please note that we are using <code>prereqs-&gt;runtime-&gt;recommends</code> to highlight these found modules for you.</p>

<p>perl-minversion is 5.010 in following examples due to <code>mro</code> see below and infile later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">Perl::MinimumVersion::</span><span class="n">Fast</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">methods</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">:</span> <span class="n">minimum_explicit_version</span><span class="p">,</span> <span class="n">minimum_syntax_version</span><span class="p">,</span> <span class="n">minimum_version</span><span class="p">,</span> <span class="k">new</span><span class="p">,</span> <span class="n">version_markers</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">methods</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span> <span class="n">_build_minimum_explicit_version</span><span class="p">,</span> <span class="n">_build_minimum_syntax_version</span>
</span><span class='line'>    <span class="n">internals:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">minimum_explicit_version</span>   <span class="nb">undef</span><span class="p">,</span>
</span><span class='line'>        <span class="n">minimum_syntax_version</span>     <span class="n">version</span><span class="p">,</span>
</span><span class='line'>        <span class="n">version_markers</span>            <span class="p">{</span>
</span><span class='line'>            <span class="mf">5.010</span>   <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="s">&quot;use mro&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>eumm</h4>

<p>The eumm output format, added for ExtUtils::MakeMaker (enabling &ndash;> META.json) is a complete rework of the previous dzil.</p>

<p><code>midgen --format eumm</code></p>

<figure class='code'><figcaption><span>Output Format eumm </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use strict;
</span><span class='line'>use warnings;
</span><span class='line'>use ExtUtils::MakeMaker 6.68;
</span><span class='line'>
</span><span class='line'>WriteMakefile(
</span><span class='line'>   'NAME' => 'Class::Accessor::Grouped',
</span><span class='line'>   'VERSION_FROM' => 'lib/Class/Accessor/Grouped.pm',
</span><span class='line'>   'ABSTRACT_FROM' => 'lib/Class/Accessor/Grouped.pm',
</span><span class='line'>   'AUTHOR' => '...',
</span><span class='line'>   'LICENSE' => 'perl',
</span><span class='line'>   'BUILD_REQUIRES' => {
</span><span class='line'>      'ExtUtils::MakeMaker' => '6.68'
</span><span class='line'>   },
</span><span class='line'>   'CONFIGURE_REQUIRES' => {
</span><span class='line'>      'ExtUtils::MakeMaker' => '6.68'
</span><span class='line'>   },
</span><span class='line'>   'MIN_PERL_VERSION' => '5.010',
</span><span class='line'>   'PREREQ_PM' => {
</span><span class='line'>       'Class::XSAccessor' => '1.19',
</span><span class='line'>       'MRO::Compat'       => '0.12',
</span><span class='line'>       'Module::Runtime'   => '0.014',
</span><span class='line'>       'Sub::Name'         => '0.05',
</span><span class='line'>   },
</span><span class='line'>   'TEST_REQUIRES' => {
</span><span class='line'>       'Test::Exception'        => '0.32',
</span><span class='line'>       'Test::More'             => '1.001002',
</span><span class='line'>   },
</span><span class='line'>   'META_MERGE' => {
</span><span class='line'>      'meta-spec' => { 'version' => '2' },
</span><span class='line'>      'prereqs' => {
</span><span class='line'>         'test' => {
</span><span class='line'>            'suggests' => {
</span><span class='line'>                'Devel::Hide'         => '0.0009',
</span><span class='line'>                'Package::Stash'      => '0.36',
</span><span class='line'>                'Pod::Coverage'       => '0.23',
</span><span class='line'>                'Test::CheckManifest' => '1.28',
</span><span class='line'>                'Test::NoTabs'        => '1.3',
</span><span class='line'>                'Test::Pod'           => '1.48',
</span><span class='line'>                'Test::Pod::Coverage' => '1.08',
</span><span class='line'>                'Test::Spelling'      => '0.19',
</span><span class='line'>                'Test::Strict'        => '0.22',
</span><span class='line'>            }
</span><span class='line'>         }
</span><span class='line'>      },
</span><span class='line'>   },
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>metajson</h4>

<p>Now with support for <code>prereqs-&gt;runtime-&gt;recommends</code> Meta-CPAN-spec v2</p>

<p><code>midgen --format metajson</code></p>

<figure class='code'><figcaption><span>Output Format metajson </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "prereqs" : {
</span><span class='line'>      "runtime" : {
</span><span class='line'>         "requires" : {
</span><span class='line'>            "Module::Runtime" : "0.014",
</span><span class='line'>            "perl" : "5.010",
</span><span class='line'>         },
</span><span class='line'>         "suggests" : {...},
</span><span class='line'>         "recommends" : {
</span><span class='line'>            "Class::XSAccessor" : "1.19",
</span><span class='line'>            "MRO::Compat" : "0.12",
</span><span class='line'>            "Sub::Name" : "0.05",
</span><span class='line'>         }
</span><span class='line'>      "test" : {
</span><span class='line'>         "requires" : {
</span><span class='line'>            "Test::Exception" : "0.32",
</span><span class='line'>            "Test::More" : "1.001002",
</span><span class='line'>         },
</span><span class='line'>         "suggests" : {
</span><span class='line'>            "Devel::Hide" : "0.0009",
</span><span class='line'>            "Package::Stash" : "0.36",
</span><span class='line'>            "Pod::Coverage" : "0.23",
</span><span class='line'>            "Test::CheckManifest" : "1.28",
</span><span class='line'>            "Test::NoTabs" : "1.3",
</span><span class='line'>            "Test::Pod" : "1.48",
</span><span class='line'>            "Test::Pod::Coverage" : "1.08",
</span><span class='line'>            "Test::Spelling" : "0.19",
</span><span class='line'>            "Test::Strict" : "0.22",
</span><span class='line'>         }
</span><span class='line'>      }
</span><span class='line'>   }
</span><span class='line'>   "no_index" : {
</span><span class='line'>      "directory" : [
</span><span class='line'>         "inc",
</span><span class='line'>         "t",
</span><span class='line'>      ]
</span><span class='line'>   },
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>cpanfile</h4>

<p>Now with support for <code>prereqs-&gt;runtime-&gt;recommends</code> Meta-CPAN-spec v2</p>

<p><code>midgen --format cpanfile</code></p>

<figure class='code'><figcaption><span>Output Format metajson </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>requires 'Module::Runtime', '0.014';
</span><span class='line'>requires 'perl',            '5.010';
</span><span class='line'>
</span><span class='line'>recommends 'Class::XSAccessor', '1.19';
</span><span class='line'>recommends 'MRO::Compat',       '0.12';
</span><span class='line'>recommends 'Sub::Name',         '0.05';
</span><span class='line'>
</span><span class='line'>on test => sub {
</span><span class='line'>  requires 'Test::Exception',        '0.32';
</span><span class='line'>  requires 'Test::More',             '1.001002';
</span><span class='line'>
</span><span class='line'>  suggests 'Devel::Hide',         '0.0009';
</span><span class='line'>  suggests 'Package::Stash',      '0.36';
</span><span class='line'>  suggests 'Pod::Coverage',       '0.23';
</span><span class='line'>  suggests 'Test::CheckManifest', '1.28';
</span><span class='line'>  suggests 'Test::NoTabs',        '1.3';
</span><span class='line'>  suggests 'Test::Pod',           '1.48';
</span><span class='line'>  suggests 'Test::Pod::Coverage', '1.08';
</span><span class='line'>  suggests 'Test::Spelling',      '0.19';
</span><span class='line'>  suggests 'Test::Strict',        '0.22';
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<h4>infile</h4>

<p><code>midgen --format infile</code></p>

<p>Change to internals means that we no longer exclude any found modules.</p>

<p>We no longer check against METAcpan.Api for <code>--format infile</code>, so it is much quicker.</p>

<p><strong>pros</strong> you are going to get a lot more information.</p>

<p><strong>cons</strong> you might see some duplicates as some modules are found by more than one additional scanner.</p>

<figure class='code'><figcaption><span>Output Format infile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>------------------------------------------------------------------------
</span><span class='line'> | Module                   | Version  | Found in                         |
</span><span class='line'>  ------------------------------------------------------------------------
</span><span class='line'> | AccessorGroups           | 0        | /t/lib/AccessorGroupsSubclass.pm |
</span><span class='line'> | AccessorGroupsComp       | 0        | /t/component.t                   |
</span><span class='line'> | AccessorGroupsParent     | 0        | /t/lib/AccessorGroups.pm         |
</span><span class='line'> | AccessorGroupsRO         | 0        | /t/accessors_ro.t                |
</span><span class='line'> | AccessorGroupsSubclass   | 0        | /t/accessors.t                   |
</span><span class='line'> | AccessorGroupsSubclass   | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | AccessorGroupsSubclass   | 0        | /t/illegal_name.t                |
</span><span class='line'> | AccessorGroupsWO         | 0        | /t/accessors_wo.t                |
</span><span class='line'> | B                        | 0        | /t/accessors.t                   |
</span><span class='line'> | B                        | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | B                        | 0        | /t/basic.t                       |
</span><span class='line'> | B                        | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | BaseInheritedGroups      | 0        | /t/lib/SuperInheritedGroups.pm   |
</span><span class='line'> | Carp                     | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/AccessorGroupsParent.pm   |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/AccessorGroupsRO.pm       |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/AccessorGroupsWO.pm       |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/AccessorGroupsComp.pm     |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/ExtraInheritedGroups.pm   |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/BaseInheritedGroups.pm    |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_pp.t                |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_pp.t                |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/clean_namespace.t             |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Class::Accessor::Grouped | 0        | /t/lib/NotHashBased.pm           |
</span><span class='line'> | Class::XSAccessor        | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Class::XSAccessor        | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Class::XSAccessor        | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | Class::XSAccessor        | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Class::XSAccessor        | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Config                   | 0        | /t/accessors_ro.t                |
</span><span class='line'> | Config                   | 0        | /t/accessors_wo.t                |
</span><span class='line'> | Data::Dumper             | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | Data::Dumper             | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Devel::Hide              | 0        | /t/accessors_pp.t                |
</span><span class='line'> | Devel::Hide              | 0        | /t/accessors_pp.t                |
</span><span class='line'> | ExtraInheritedGroups     | 0        | /t/inherited.t                   |
</span><span class='line'> | File::Basename           | 0        | /t/strict.t                      |
</span><span class='line'> | File::Basename           | 0        | /t/strict.t                      |
</span><span class='line'> | File::Basename           | 0        | /t/warnings.t                    |
</span><span class='line'> | File::Basename           | 0        | /t/warnings.t                    |
</span><span class='line'> | File::Find               | 0        | /t/strict.t                      |
</span><span class='line'> | File::Find               | 0        | /t/warnings.t                    |
</span><span class='line'> | File::Find               | 0        | /t/warnings.t                    |
</span><span class='line'> | File::Find               | 0        | /t/strict.t                      |
</span><span class='line'> | File::Spec::Functions    | 0        | /t/accessors_xs.t                |
</span><span class='line'> | File::Spec::Functions    | 0        | /t/accessors_pp.t                |
</span><span class='line'> | File::Spec::Unix         | 0        | /t/accessors_pp.t                |
</span><span class='line'> | File::Spec::Unix         | 0        | /t/accessors_xs.t                |
</span><span class='line'> | FindBin                  | 0        | /t/accessors_pp.t                |
</span><span class='line'> | FindBin                  | 0        | /t/accessors_xs.t                |
</span><span class='line'> | MRO::Compat              | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | MRO::Compat              | 0        | /t/clean_namespace.t             |
</span><span class='line'> | MRO::Compat              | 0        | /t/clean_namespace.t             |
</span><span class='line'> | Module::Runtime          | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | NotHashBased             | 0        | /t/inherited.t                   |
</span><span class='line'> | Package::Stash           | 0        | /t/clean_namespace.t             |
</span><span class='line'> | Package::Stash           | 0        | /t/clean_namespace.t             |
</span><span class='line'> | Pod::Coverage            | 0.14     | /t/pod_coverage.t                |
</span><span class='line'> | Scalar::Util             | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | Sub::Name                | 0        | /t/illegal_name.t                |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Sub::Name                | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_pp.t                |
</span><span class='line'> | Sub::Name                | 0        | /t/illegal_name.t                |
</span><span class='line'> | Sub::Name                | 0        | /t/accessors_pp.t                |
</span><span class='line'> | SuperInheritedGroups     | 0        | /t/inherited.t                   |
</span><span class='line'> | Test::CheckManifest      | 0.09     | /t/manifest.t                    |
</span><span class='line'> | Test::Exception          | 0        | /t/inherited.t                   |
</span><span class='line'> | Test::Exception          | 0        | /t/component.t                   |
</span><span class='line'> | Test::Exception          | 0        | /t/accessors_ro.t                |
</span><span class='line'> | Test::Exception          | 0        | /t/accessors_wo.t                |
</span><span class='line'> | Test::Exception          | 0        | /t/illegal_name.t                |
</span><span class='line'> | Test::More               | 0        | /t/strict.t                      |
</span><span class='line'> | Test::More               | 0        | /t/accessors_wo.t                |
</span><span class='line'> | Test::More               | 0        | /t/component.t                   |
</span><span class='line'> | Test::More               | 0        | /t/manifest.t                    |
</span><span class='line'> | Test::More               | 0        | /t/manifest.t                    |
</span><span class='line'> | Test::More               | 0        | /t/accessors.t                   |
</span><span class='line'> | Test::More               | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | Test::More               | 0        | /t/pod_syntax.t                  |
</span><span class='line'> | Test::More               | 0        | /t/pod_syntax.t                  |
</span><span class='line'> | Test::More               | 0        | /t/pod_spelling.t                |
</span><span class='line'> | Test::More               | 0        | /t/pod_spelling.t                |
</span><span class='line'> | Test::More               | 0        | /t/basic.t                       |
</span><span class='line'> | Test::More               | 0        | /t/style_no_tabs.t               |
</span><span class='line'> | Test::More               | 0        | /t/style_no_tabs.t               |
</span><span class='line'> | Test::More               | 0        | /t/warnings.t                    |
</span><span class='line'> | Test::More               | 0        | /t/warnings.t                    |
</span><span class='line'> | Test::More               | 0        | /t/accessors_pp.t                |
</span><span class='line'> | Test::More               | 0        | /t/clean_namespace.t             |
</span><span class='line'> | Test::More               | 0        | /t/accessors_xs.t                |
</span><span class='line'> | Test::More               | 0        | /t/inherited.t                   |
</span><span class='line'> | Test::More               | 0        | /t/strict.t                      |
</span><span class='line'> | Test::More               | 0        | /t/illegal_name.t                |
</span><span class='line'> | Test::More               | 0        | /t/accessors_ro.t                |
</span><span class='line'> | Test::More               | 0        | /t/pod_coverage.t                |
</span><span class='line'> | Test::More               | 0        | /t/pod_coverage.t                |
</span><span class='line'> | Test::NoTabs             | 0.03     | /t/style_no_tabs.t               |
</span><span class='line'> | Test::Pod                | 1.00     | /t/pod_syntax.t                  |
</span><span class='line'> | Test::Pod::Coverage      | 1.04     | /t/pod_coverage.t                |
</span><span class='line'> | Test::Spelling           | 0.11     | /t/pod_spelling.t                |
</span><span class='line'> | Test::Strict             | 0        | /t/strict.t                      |
</span><span class='line'> | Test::Strict             | 0.05     | /t/warnings.t                    |
</span><span class='line'> | base                     | 0        | /t/lib/ExtraInheritedGroups.pm   |
</span><span class='line'> | base                     | 0        | /t/lib/NotHashBased.pm           |
</span><span class='line'> | base                     | 0        | /t/lib/SuperInheritedGroups.pm   |
</span><span class='line'> | base                     | 0        | /t/lib/BaseInheritedGroups.pm    |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroups.pm         |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroupsParent.pm   |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroupsSubclass.pm |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroupsComp.pm     |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroupsRO.pm       |
</span><span class='line'> | base                     | 0        | /t/lib/AccessorGroupsWO.pm       |
</span><span class='line'> | base                     | 0        | /t/clean_namespace.t             |
</span><span class='line'> | constant                 | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | lib                      | 0        | /t/manifest.t                    |
</span><span class='line'> | lib                      | 0        | /t/pod_syntax.t                  |
</span><span class='line'> | lib                      | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | lib                      | 0        | /t/component.t                   |
</span><span class='line'> | lib                      | 0        | /t/warnings.t                    |
</span><span class='line'> | lib                      | 0        | /t/accessors.t                   |
</span><span class='line'> | lib                      | 0        | /t/accessors_wo.t                |
</span><span class='line'> | lib                      | 0        | /t/accessors_xs.t                |
</span><span class='line'> | lib                      | 0        | /t/pod_spelling.t                |
</span><span class='line'> | lib                      | 0        | /t/inherited.t                   |
</span><span class='line'> | lib                      | 0        | /t/accessors_ro.t                |
</span><span class='line'> | lib                      | 0        | /t/illegal_name.t                |
</span><span class='line'> | lib                      | 0        | /t/pod_coverage.t                |
</span><span class='line'> | lib                      | 0        | /t/strict.t                      |
</span><span class='line'> | lib                      | 0        | /t/accessors_pp.t                |
</span><span class='line'> | mro                      | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | strict                   | 0        | /t/pod_spelling.t                |
</span><span class='line'> | strict                   | 0        | /t/lib/ExtraInheritedGroups.pm   |
</span><span class='line'> | strict                   | 0        | /t/manifest.t                    |
</span><span class='line'> | strict                   | 0        | /t/accessors.t                   |
</span><span class='line'> | strict                   | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | strict                   | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroupsComp.pm     |
</span><span class='line'> | strict                   | 0        | /t/accessors_pp.t                |
</span><span class='line'> | strict                   | 0        | /t/lib/SuperInheritedGroups.pm   |
</span><span class='line'> | strict                   | 0        | /t/basic.t                       |
</span><span class='line'> | strict                   | 0        | /t/pod_syntax.t                  |
</span><span class='line'> | strict                   | 0        | /t/clean_namespace.t             |
</span><span class='line'> | strict                   | 0        | /t/style_no_tabs.t               |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroupsWO.pm       |
</span><span class='line'> | strict                   | 0        | /t/warnings.t                    |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroupsRO.pm       |
</span><span class='line'> | strict                   | 0        | /t/component.t                   |
</span><span class='line'> | strict                   | 0        | /t/lib/NotHashBased.pm           |
</span><span class='line'> | strict                   | 0        | /t/inherited.t                   |
</span><span class='line'> | strict                   | 0        | /t/lib/BaseInheritedGroups.pm    |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroupsParent.pm   |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroups.pm         |
</span><span class='line'> | strict                   | 0        | /t/lib/AccessorGroupsSubclass.pm |
</span><span class='line'> | strict                   | 0        | /t/strict.t                      |
</span><span class='line'> | strict                   | 0        | /t/accessors_xs.t                |
</span><span class='line'> | strict                   | 0        | /t/accessors_wo.t                |
</span><span class='line'> | strict                   | 0        | /t/accessors_ro.t                |
</span><span class='line'> | strict                   | 0        | /t/illegal_name.t                |
</span><span class='line'> | strict                   | 0        | /t/pod_coverage.t                |
</span><span class='line'> | warnings                 | 0        | /t/warnings.t                    |
</span><span class='line'> | warnings                 | 0        | /t/illegal_name.t                |
</span><span class='line'> | warnings                 | 0        | /t/accessors.t                   |
</span><span class='line'> | warnings                 | 0        | /t/manifest.t                    |
</span><span class='line'> | warnings                 | 0        | /t/pod_syntax.t                  |
</span><span class='line'> | warnings                 | 0        | /t/accessors_xs_cachedwarn.t     |
</span><span class='line'> | warnings                 | 0        | /t/lib/NotHashBased.pm           |
</span><span class='line'> | warnings                 | 0        | /t/lib/SuperInheritedGroups.pm   |
</span><span class='line'> | warnings                 | 0        | /t/basic.t                       |
</span><span class='line'> | warnings                 | 0        | /t/lib/BaseInheritedGroups.pm    |
</span><span class='line'> | warnings                 | 0        | /t/style_no_tabs.t               |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroupsRO.pm       |
</span><span class='line'> | warnings                 | 0        | /lib/Class/Accessor/Grouped.pm   |
</span><span class='line'> | warnings                 | 0        | /t/clean_namespace.t             |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroupsComp.pm     |
</span><span class='line'> | warnings                 | 0        | /t/component.t                   |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroupsWO.pm       |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroups.pm         |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroupsParent.pm   |
</span><span class='line'> | warnings                 | 0        | /t/lib/AccessorGroupsSubclass.pm |
</span><span class='line'> | warnings                 | 0        | /t/pod_spelling.t                |
</span><span class='line'> | warnings                 | 0        | /t/accessors_ro.t                |
</span><span class='line'> | warnings                 | 0        | /t/strict.t                      |
</span><span class='line'> | warnings                 | 0        | /t/accessors_pp.t                |
</span><span class='line'> | warnings                 | 0        | /t/lib/ExtraInheritedGroups.pm   |
</span><span class='line'> | warnings                 | 0        | /t/inherited.t                   |
</span><span class='line'> | warnings                 | 0        | /t/accessors_xs.t                |
</span><span class='line'> | warnings                 | 0        | /t/accessors_wo.t                |
</span><span class='line'> | warnings                 | 0        | /t/pod_coverage.t                |
</span><span class='line'>  ------------------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>NB: This is the only output format which displays the found version string at present.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.26]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007/"/>
    <updated>2013-07-25T14:40:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Added Two more output formats:

<ul>
<li>infile, output format, module v perl files they were Found in</li>
<li>metajson, output format META.json</li>
</ul>
</li>
<li>Internal scanner update and why</li>
<li>Finish off conversion to Type::Tiny</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3>Two new output formats:</h3>

<h4>infile</h4>

<p>The following was conceived to provided a solution to <a href="https://rt.cpan.org/Public/Bug/Display.html?id=76527">RT76527</a>.</p>

<p><code>midgen --format infile</code></p>

<figure class='code'><figcaption><span>Output Format infile run against a test dist </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  -------------------------------------------------------
</span><span class='line'> | Module                | Version  | Found in           |
</span><span class='line'>  -------------------------------------------------------
</span><span class='line'> | Bar                   | 0.2      | /lib/Anamal.pm     |
</span><span class='line'> | Carp::Always::Color   | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Compiler::Lexer       | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Data::Printer         | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Foo                   | 0.123456 | /lib/Anamal.pm     |
</span><span class='line'> | Moo                   | 1.000    | /lib/Anamal.pm     |
</span><span class='line'> | Moo                   | 0.999    | /lib/Plugin/Dog.pm |
</span><span class='line'> | Moo                   | 0.888    | /lib/Plugin/Cat.pm |
</span><span class='line'> | Params::Util          | 0        | /lib/Anamal.pm     |
</span><span class='line'> | String::RewritePrefix | 0.005    | /lib/Anamal.pm     |
</span><span class='line'> | Test::Mock::LWP       | 0        | /t/666-tmw.t       |
</span><span class='line'> | Test::Mock::LWP       | 0        | /t/00.load.t       |
</span><span class='line'> | Test::More            | 0        | /t/pod.t           |
</span><span class='line'> | Test::More            | 0        | /t/pod-coverage.t  |
</span><span class='line'> | Test::More            | 0        | /t/666-tmw.t       |
</span><span class='line'> | Test::More            | 0        | /t/00.load.t       |
</span><span class='line'> | Test::Pod             | 0        | /t/pod.t           |
</span><span class='line'> | Test::Pod::Coverage   | 0        | /t/pod-coverage.t  |
</span><span class='line'> | Types::Standard       | 0        | /lib/Anamal.pm     |
</span><span class='line'> | X                     | 0        | /lib/Anamal.pm     |
</span><span class='line'>  -------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>NB: this is the only output format which displays the found version string, because it just makes sense in this instance.
Many thanks to ETHER along the way.</p>

<h4>metajson</h4>

<p>The following is what midgen thinks your <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> might contain based upon your dist, or in this case a test dist.</p>

<p><code>midgen --format metajson</code></p>

<p><img src="http://kevindawson.github.io/bowtie/images/007-metajson.png"></p>

<h3>Internal Scanner update</h3>

<p>These scanners enable midgen to identify <em>prereqs->test->suggests</em> from a <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> perspective.</p>

<p>Here is a <a href="http://kevindawson.github.io/bowtie/images/007-flow_chart.png">flow chart</a> that should help with why.</p>

<p>Many thanks to TOBYINK for his <a href="https://github.com/kevindawson/App-Midgen/issues/5">critique</a> which resulted in the following taking another step forward.</p>

<h4>Eval new scanner</h4>

<p>Eval is not realy a new scanner, it&rsquo;s just come of age with block support.</p>

<figure class='code'><figcaption><span>A selection of what Eval supports </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="s">&quot;use Test::Kwalitee::Extra 0.000007&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s">&quot;use Moo 1.002; 1;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">no</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span> <span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$HAVE_MOOSE</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Test::Requires update</h4>

<p>Support for barewords in Test::Requires scanner</p>

<figure class='code'><figcaption><span>Now supports barewords in Test::Requires </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="n">Moo</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="n">Moose</span> <span class="o">=&gt;</span> <span class="s">&#39;2.000&#39;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Finish off conversion to Type::Tiny</h3>

<p>Why? one, so I can have a consistent Type system regardless of Moose or Moo, two, it&rsquo;s faster.
The Second part of the conversion from MooX::Types::MooseLike to Type::Tiny.</p>

<p>So we have gone from this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">MooX::Types::MooseLike::</span><span class="n">Base</span> <span class="sx">qw( InstanceOf )</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Types::</span><span class="n">Standard</span> <span class="sx">qw( InstanceOf )</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many thanks to TOBYINK along the way.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.24]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006/"/>
    <updated>2013-06-04T18:18:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Some extra speed taking advantage of some new developments in:

<ul>
<li>PPI::XS</li>
<li>Perl::MinimumVersion::Fast</li>
</ul>
</li>
<li>Re-factor the Output formats to composed Roles</li>
<li>Start of conversion to Type::Tiny</li>
</ul>


<!-- more -->


<h3>Some extra speed taking advantage of some new developments in:</h3>

<h4>PPI::XS</h4>

<p>Now that PPI-XS has been updated (Fix &ldquo;defined @array&rdquo; deprecation warning) DAGOLDEN++. We can turn off the noise suppression and add it as a dependency if your OS <code>can_cc</code>. Not much of a boost but anything here is a benefit.</p>

<h4>Perl::MinimumVersion::Fast</h4>

<p>Perl::MinimumVersion::Fast TOKUHIROM++ is built on top of Compiler::Lexer GOCCY++, this is <strong>quick</strong>. This enables us to check all perl modules rather than the subset we extract when looking for a Package Name. Due to it being such a cool new module, we will fall back to Perl::MinimumVersion if your OS <code>!can_cc</code>.</p>

<h3>Re-factor the Output formats to Composed Roles</h3>

<p>Inspired by the Composed Method Theory, I thought why not have a Composed Role, for the output formats, with each format type being a separate Role, so I did.</p>

<figure class='code'><figcaption><span>Output Format Composed Roles </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="n">with</span> <span class="sx">qw(</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MIdsl</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MI</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MB</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::Dzil</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::Dist</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::CPANfile</span>
</span><span class='line'><span class="sx">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start of conversion to Type::Tiny</h3>

<p>Why, one so I can have a consistent Type system regardless of Moose or Moo, two it&rsquo;s faster.
The first part of the conversion from MooX::Types::MooseLike to Type::Tiny</p>

<p>So we have gone from this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">MooX::Types::MooseLike::</span><span class="n">Base</span> <span class="sx">qw(:all)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Types::</span><span class="n">Standard</span> <span class="sx">qw( ArrayRef Bool Int Object Str)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many thanks to TOBYINK along the way, the final part will happen soon.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.22]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005/"/>
    <updated>2013-05-09T19:29:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Switched output format type from <strong>build</strong> to <strong>mb</strong></li>
<li>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories

<ul>
<li>Find modules in Test::Requires blocks</li>
<li>Find modules in use_ok BEGIN blocks</li>
</ul>
</li>
<li>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</li>
</ul>


<!-- more -->


<h3>Switched output format type from <strong>build</strong> to <strong>mb</strong></h3>

<pre><code>midgen -f mb
</code></pre>

<p>Thanks for the kick azawawi++</p>

<h3>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories</h3>

<p>We can now find the following located in your test files, then display in the revelant section in your chose output format.</p>

<h4>Find modules in <strong>Test::Requires</strong> blocks</h4>

<p>Example 1</p>

<figure class='code'><figcaption><span>Here&#8217;s a selection of Test::Requires </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="s">&#39;Test::Pod&#39;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="s">&#39;Test::Extra&#39;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw[MIME::Types]</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw(IO::Handle::Util LWP::Protocol::http10)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;Test::Test1&quot;</span> <span class="o">=&gt;</span> <span class="s">&#39;1.01&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;Test::Test2&#39;</span> <span class="o">=&gt;</span> <span class="mf">2.02</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Find modules in <strong>use_ok</strong> BEGIN blocks</h4>

<p>Example 2</p>

<figure class='code'><figcaption><span>Here&#8217;s a selection of ues_ok in BEGIN block </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Term::ReadKey&#39;</span><span class="p">,</span> <span class="s">&#39;2.30&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Term::ReadLine&#39;</span><span class="p">,</span> <span class="s">&#39;1.10&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Fred::BloggsOne&#39;</span><span class="p">,</span> <span class="s">&#39;1.01&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&quot;Fred::BloggsTwo&quot;</span><span class="p">,</span> <span class="s">&quot;2.02&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Fred::BloggsThree&#39;</span><span class="p">,</span> <span class="mf">3.03</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</h3>

<pre><code>~/GitHub/Plack$ midgen -lf cpanfile
</code></pre>

<p><img src="http://kevindawson.github.io/bowtie/images/005-example-03.png"></p>

<ul>
<li>The above shows <strong>requires</strong> from ( use, require, no, use_ok, &hellip; )</li>
<li>The <strong>suggests</strong> come from ( Test::Requires )</li>
</ul>


<p><strong>nb</strong> <em>the !mcpan are modules from the local test framework</em> hence they don&rsquo;t exist :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, update notice + some colour]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004/"/>
    <updated>2013-04-04T20:08:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004</id>
    <content type="html"><![CDATA[<p>Switched output format type from cfile to cpanfile</p>

<pre><code>midgen -f cpanfile
</code></pre>

<p>Thanks for the kick Miyagawa++</p>

<!-- more -->


<p>NB, if you have written an <code>.midgenrc</code> file suggest you either edit it or delete it and start again, opps.</p>

<p>Thought I would show you all the colour</p>

<ul>
<li>yellow module version</li>
<li>bright-yellow dual-life module version</li>
<li>cyan module no version, so showing it&rsquo;s distribution version</li>
</ul>


<p><img src="http://kevindawson.github.io/bowtie/images/midgen_001.png"></p>

<p>All version numbers from MetaCPAN</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, now with cpanfile prereqs]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003/"/>
    <updated>2013-04-03T23:32:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003</id>
    <content type="html"><![CDATA[<h2>More features</h2>

<p><strong>cpanfile output format, prereqs (requires, recommends, on test, on develop)</strong></p>

<pre><code>midgen -lf cfile
</code></pre>

<ul>
<li>Basic scanning of Dist-Zilla Plugins</li>
</ul>


<p>Here is a sample, <a href="https://github.com/kevindawson/App-Midgen/wiki/Milla">with cpanfile and dist-zilla plugins</a>, see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a> for more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen Take two]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/03/24/app-midgen-002/"/>
    <updated>2013-03-24T17:02:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/03/24/app-midgen-002</id>
    <content type="html"><![CDATA[<p>First I would like to say a big Thank You for all the critiques I received, here and in the channels.</p>

<p>App::Midgen</p>

<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<!-- more -->


<p>Now able to show dual-life modules current version number.
Lets start with the changes and inspiration.</p>

<ul>
<li>Switched to using MetaCPAN-API due to a write issue with CPAN, neilb++</li>
<li>Switched to using Perl-PrereqScanner to do most of the grunt work as pointed out by Mithaldu++ daxim++</li>
<li>spelling, re-factor option names, inspired by mauke++</li>
<li><code>--format</code> <em>change output format</em></li>
<li>changed default output, no extra processing, only distribution version for modules without a version number mst++</li>
</ul>


<p><em>if I missed anybody, sorry</em></p>

<p>And some new features.
Add command line option to show dual-line module versions as well.</p>

<pre><code>midgen --dual_life
</code></pre>

<p>Add ability to read/write options from <code>~/.midgenrc</code></p>

<p>Command line options always overwrite options from <code>~/.midgenrc</code> if you have one.
The output format uses colour to add visualization of module version number types, be that mcpan, dual-life or added distribution.</p>

<p>We now use colour to help differentiate between the different module version number types, we also honour <strong>$ENV{ANSI_COLORS_DISABLED}</strong></p>

<p>for sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, What is it?]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/03/11/app-midgen-001/"/>
    <updated>2013-03-11T13:59:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/03/11/app-midgen-001</id>
    <content type="html"><![CDATA[<p>This is an aid to present a packages module requirements by scanning the package, then displaying in a familiar format with the current version number from CPAN.</p>

<p>This started out as a way of generating the core for a Module::Install::DSL Makefile.PL, why DSL because it&rsquo;s nice and clean, so now you can generate the contents and check when you want, yes it&rsquo;s another PPI powered app.</p>

<!-- more -->


<p>All output goes to STDOUT, so you can use it as you see fit.</p>

<p>CPAN Version Number Displayed</p>

<ul>
<li>NN.nnnnnn we got the current version number from CPAN (numify)</li>
<li><strong>undef</strong> no version number returned by CPAN</li>
<li><strong>core</strong> indicates the module is a perl core module</li>
<li><strong>!cpan</strong> must be local, one of yours. Not in CPAN, Not in core.</li>
</ul>


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<p>We also display some other info to complement the modules we have found.</p>

<p>For more info and sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>

<p>Change to the root of the package you want to scan and run</p>

<pre><code>midgen [options]
</code></pre>

<p>&mdash;help &mdash;output &mdash;core &mdash;verbose &mdash;parent &mdash;mojo &mdash;noisy_children &mdash;twins &mdash;zero &mdash;debug</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 001]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/02/02/octopress-001/"/>
    <updated>2013-02-02T02:02:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/02/02/octopress-001</id>
    <content type="html"><![CDATA[<h2>Octopress my hacks</h2>

<p>A reminder of what I hacked, and where it came from :)</p>

<!-- more -->


<h3>Links</h3>

<ul>
<li><a href="http://anchetawern.github.io/blog/2012/11/29/customizing-octopress/">Customizing Octopress</a></li>
<li><a href="http://blog.jphpsf.com/2012/06/12/squeezing-octopress-for-faster-load-times">Squeezing Octopress for Faster Load Times</a></li>
<li><a href="http://blog.orenyk.com/2013/03/08/fixing-my-octopress-config-links/">Fixing my octopress Config Links</a></li>
<li><a href="http://blog.bigdinosaur.org/using-at-font-face-with-octopress/">Using @font-face With Octopress</a></li>
<li><a href="http://blog.bigdinosaur.org/gzipping-at-font-face-with-nginx/">Gzipping @font-face With Nginx</a></li>
<li><a href="http://www.dotnetguy.co.uk/post/2012/06/25/octopress-category-list-plugin/">Category List Plug-in</a></li>
<li><a href="http://learnaholic.me/2012/10/15/octopress-seo-and-disabling-the-blog-route/">SEO and Disabling the Blog Route</a></li>
<li><a href="http://xit0.org/2013/04/remove-redundant-slash-blog-prefix-from-octopress-website/">Remove Redundant /blog Prefix From Octopress Website</a></li>
<li><a href="http://www.yatishmehta.in/seo-for-octopress">SEO for Octopress</a></li>
<li><p><a href="http://time.to.pullthepl.ug/blog/2012/8/20/octopress-top-categories-plugin/">Top Categories Plugin</a></p></li>
<li><p>Octopress</p>

<ul>
<li><a href="http://octopress.org/docs/theme/styles/">Styles</a></li>
<li><a href="http://octopress.org/docs/updating/">Updating</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
