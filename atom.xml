<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2013-07-31T10:52:52+01:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[bowtie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.26]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007/"/>
    <updated>2013-07-25T14:40:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/07/25/app-midgen-007</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Added Two more output formats:

<ul>
<li>infile, output format, module v perl files they were Found in</li>
<li>metajson, output format META.json</li>
</ul>
</li>
<li>Internal scanner update and why</li>
<li>Finish off conversion to Type::Tiny</li>
</ul>


<!-- more -->


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<h3>Two new output formats:</h3>

<h4>infile</h4>

<p>The following was conceived to provided a solution to <a href="https://rt.cpan.org/Public/Bug/Display.html?id=76527">RT76527</a>.</p>

<p><code>midgen --format infile</code></p>

<figure class='code'><figcaption><span>Output Format infile run against a test dist </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  -------------------------------------------------------
</span><span class='line'> | Module                | Version  | Found in           |
</span><span class='line'>  -------------------------------------------------------
</span><span class='line'> | Bar                   | 0.2      | /lib/Anamal.pm     |
</span><span class='line'> | Carp::Always::Color   | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Compiler::Lexer       | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Data::Printer         | 0        | /lib/Anamal.pm     |
</span><span class='line'> | Foo                   | 0.123456 | /lib/Anamal.pm     |
</span><span class='line'> | Moo                   | 1.000    | /lib/Anamal.pm     |
</span><span class='line'> | Moo                   | 0.999    | /lib/Plugin/Dog.pm |
</span><span class='line'> | Moo                   | 0.888    | /lib/Plugin/Cat.pm |
</span><span class='line'> | Params::Util          | 0        | /lib/Anamal.pm     |
</span><span class='line'> | String::RewritePrefix | 0.005    | /lib/Anamal.pm     |
</span><span class='line'> | Test::Mock::LWP       | 0        | /t/666-tmw.t       |
</span><span class='line'> | Test::Mock::LWP       | 0        | /t/00.load.t       |
</span><span class='line'> | Test::More            | 0        | /t/pod.t           |
</span><span class='line'> | Test::More            | 0        | /t/pod-coverage.t  |
</span><span class='line'> | Test::More            | 0        | /t/666-tmw.t       |
</span><span class='line'> | Test::More            | 0        | /t/00.load.t       |
</span><span class='line'> | Test::Pod             | 0        | /t/pod.t           |
</span><span class='line'> | Test::Pod::Coverage   | 0        | /t/pod-coverage.t  |
</span><span class='line'> | Types::Standard       | 0        | /lib/Anamal.pm     |
</span><span class='line'> | X                     | 0        | /lib/Anamal.pm     |
</span><span class='line'>  -------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>NB: this is the only output format which displays the found version string, because it just makes sense in this instance.
Many thanks to ETHER along the way.</p>

<h4>metajson</h4>

<p>The following is what midgen thinks your <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> might contain based upon your dist, or in this case a test dist.</p>

<p><code>midgen --format metajson</code></p>

<p><img src="http://kevindawson.github.io/bowtie/images/007-metajson.png"></p>

<h3>Internal Scanner update</h3>

<p>These scanners enable midgen to identify <em>prereqs->test->suggests</em> from a <a href="https://metacpan.org/module/CPAN::Meta::Spec#Prereq-Spec">META.json</a> perspective.</p>

<p>Here is a <a href="http://kevindawson.github.io/bowtie/images/007-flow_chart.png">flow chart</a> that should help with why.</p>

<p>Many thanks to TOBYINK for his <a href="https://github.com/kevindawson/App-Midgen/issues/5">critique</a> which resulted in the following taking another step forward.</p>

<h4>Eval new scanner</h4>

<p>Eval is not realy a new scanner, it&rsquo;s just come of age with block support.</p>

<figure class='code'><figcaption><span>A selection of what Eval supports </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="s">&quot;use Test::Kwalitee::Extra 0.000007&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s">&quot;use Moo 1.002; 1;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">no</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span> <span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$HAVE_MOOSE</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nb">require</span> <span class="n">Moose</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Test::Requires update</h4>

<p>Support for barewords in Test::Requires scanner</p>

<figure class='code'><figcaption><span>Now supports barewords in Test::Requires </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="n">Moo</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="n">Moose</span> <span class="o">=&gt;</span> <span class="s">&#39;2.000&#39;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Finish off conversion to Type::Tiny</h3>

<p>Why? one, so I can have a consistent Type system regardless of Moose or Moo, two, it&rsquo;s faster.
The Second part of the conversion from MooX::Types::MooseLike to Type::Tiny.</p>

<p>So we have gone from this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">MooX::Types::MooseLike::</span><span class="n">Base</span> <span class="sx">qw( InstanceOf )</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Types::</span><span class="n">Standard</span> <span class="sx">qw( InstanceOf )</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many thanks to TOBYINK along the way.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.24]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006/"/>
    <updated>2013-06-04T18:18:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/06/04/app-midgen-006</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Some extra speed taking advantage of some new developments in:

<ul>
<li>PPI::XS</li>
<li>Perl::MinimumVersion::Fast</li>
</ul>
</li>
<li>Re-factor the Output formats to composed Roles</li>
<li>Start of conversion to Type::Tiny</li>
</ul>


<!-- more -->


<h3>Some extra speed taking advantage of some new developments in:</h3>

<h4>PPI::XS</h4>

<p>Now that PPI-XS has been updated (Fix &ldquo;defined @array&rdquo; deprecation warning) DAGOLDEN++. We can turn off the noise suppression and add it as a dependency if your OS <code>can_cc</code>. Not much of a boost but anything here is a benefit.</p>

<h4>Perl::MinimumVersion::Fast</h4>

<p>Perl::MinimumVersion::Fast TOKUHIROM++ is built on top of Compiler::Lexer GOCCY++, this is <strong>quick</strong>. This enables us to check all perl modules rather than the subset we extract when looking for a Package Name. Due to it being such a cool new module, we will fall back to Perl::MinimumVersion if your OS <code>!can_cc</code>.</p>

<h3>Re-factor the Output formats to Composed Roles</h3>

<p>Inspired by the Composed Method Theory, I thought why not have a Composed Role, for the output formats, with each format type being a separate Role, so I did.</p>

<figure class='code'><figcaption><span>Output Format Composed Roles </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="n">with</span> <span class="sx">qw(</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MIdsl</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MI</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::MB</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::Dzil</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::Dist</span>
</span><span class='line'><span class="sx"> App::Midgen::Role::Output::CPANfile</span>
</span><span class='line'><span class="sx">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start of conversion to Type::Tiny</h3>

<p>Why, one so I can have a consistent Type system regardless of Moose or Moo, two it&rsquo;s faster.
The first part of the conversion from MooX::Types::MooseLike to Type::Tiny</p>

<p>So we have gone from this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">MooX::Types::MooseLike::</span><span class="n">Base</span> <span class="sx">qw(:all)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Types::</span><span class="n">Standard</span> <span class="sx">qw( ArrayRef Bool Int Object Str)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Moo::</span><span class="n">Role</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many thanks to TOBYINK along the way, the final part will happen soon.</p>

<p><code>__END__</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.22]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005/"/>
    <updated>2013-05-09T19:29:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/05/09/app-midgen-005</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Switched output format type from <strong>build</strong> to <strong>mb</strong></li>
<li>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories

<ul>
<li>Find modules in Test::Requires blocks</li>
<li>Find modules in use_ok BEGIN blocks</li>
</ul>
</li>
<li>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</li>
</ul>


<!-- more -->


<h3>Switched output format type from <strong>build</strong> to <strong>mb</strong></h3>

<pre><code>midgen -f mb
</code></pre>

<p>Thanks for the kick azawawi++</p>

<h3>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories</h3>

<p>We can now find the following located in your test files, then display in the revelant section in your chose output format.</p>

<h4>Find modules in <strong>Test::Requires</strong> blocks</h4>

<p>Example 1</p>

<figure class='code'><figcaption><span>Here&#8217;s a selection of Test::Requires </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="s">&#39;Test::Pod&#39;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span> <span class="s">&#39;Test::Extra&#39;</span> <span class="o">=&gt;</span> <span class="mf">1.46</span> <span class="p">};</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw[MIME::Types]</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="sx">qw(IO::Handle::Util LWP::Protocol::http10)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Requires</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;Test::Test1&quot;</span> <span class="o">=&gt;</span> <span class="s">&#39;1.01&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;Test::Test2&#39;</span> <span class="o">=&gt;</span> <span class="mf">2.02</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Find modules in <strong>use_ok</strong> BEGIN blocks</h4>

<p>Example 2</p>

<figure class='code'><figcaption><span>Here&#8217;s a selection of ues_ok in BEGIN block </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Term::ReadKey&#39;</span><span class="p">,</span> <span class="s">&#39;2.30&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Term::ReadLine&#39;</span><span class="p">,</span> <span class="s">&#39;1.10&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Fred::BloggsOne&#39;</span><span class="p">,</span> <span class="s">&#39;1.01&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&quot;Fred::BloggsTwo&quot;</span><span class="p">,</span> <span class="s">&quot;2.02&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">use_ok</span><span class="p">(</span> <span class="s">&#39;Fred::BloggsThree&#39;</span><span class="p">,</span> <span class="mf">3.03</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</h3>

<pre><code>~/GitHub/Plack$ midgen -lf cpanfile
</code></pre>

<p><img src="http://kevindawson.github.io/bowtie/images/005-example-03.png"></p>

<ul>
<li>The above shows <strong>requires</strong> from ( use, require, no, use_ok, &hellip; )</li>
<li>The <strong>suggests</strong> come from ( Test::Requires )</li>
</ul>


<p><strong>nb</strong> <em>the !mcpan are modules from the local test framework</em> hence they don&rsquo;t exist :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, update notice + some colour]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004/"/>
    <updated>2013-04-04T20:08:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/04/app-midgen-004</id>
    <content type="html"><![CDATA[<p>Switched output format type from cfile to cpanfile</p>

<pre><code>midgen -f cpanfile
</code></pre>

<p>Thanks for the kick Miyagawa++</p>

<!-- more -->


<p>NB, if you have written an <code>.midgenrc</code> file suggest you either edit it or delete it and start again, opps.</p>

<p>Thought I would show you all the colour</p>

<ul>
<li>yellow module version</li>
<li>bright-yellow dual-life module version</li>
<li>cyan module no version, so showing it&rsquo;s distribution version</li>
</ul>


<p><img src="http://kevindawson.github.io/bowtie/images/midgen_001.png"></p>

<p>All version numbers from MetaCPAN</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, now with cpanfile prereqs]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003/"/>
    <updated>2013-04-03T23:32:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/04/03/app-midgen-003</id>
    <content type="html"><![CDATA[<h2>More features</h2>

<p><strong>cpanfile output format, prereqs (requires, recommends, on test, on develop)</strong></p>

<pre><code>midgen -lf cfile
</code></pre>

<ul>
<li>Basic scanning of Dist-Zilla Plugins</li>
</ul>


<p>Here is a sample, <a href="https://github.com/kevindawson/App-Midgen/wiki/Milla">with cpanfile and dist-zilla plugins</a>, see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a> for more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen Take two]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/03/24/app-midgen-002/"/>
    <updated>2013-03-24T17:02:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/03/24/app-midgen-002</id>
    <content type="html"><![CDATA[<p>First I would like to say a big Thank You for all the critiques I received, here and in the channels.</p>

<p>App::Midgen</p>

<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<!-- more -->


<p>Now able to show dual-life modules current version number.
Lets start with the changes and inspiration.</p>

<ul>
<li>Switched to using MetaCPAN-API due to a write issue with CPAN, neilb++</li>
<li>Switched to using Perl-PrereqScanner to do most of the grunt work as pointed out by Mithaldu++ daxim++</li>
<li>spelling, re-factor option names, inspired by mauke++</li>
<li><code>--format</code> <em>change output format</em></li>
<li>changed default output, no extra processing, only distribution version for modules without a version number mst++</li>
</ul>


<p><em>if I missed anybody, sorry</em></p>

<p>And some new features.
Add command line option to show dual-line module versions as well.</p>

<pre><code>midgen --dual_life
</code></pre>

<p>Add ability to read/write options from <code>~/.midgenrc</code></p>

<p>Command line options always overwrite options from <code>~/.midgenrc</code> if you have one.
The output format uses colour to add visualization of module version number types, be that mcpan, dual-life or added distribution.</p>

<p>We now use colour to help differentiate between the different module version number types, we also honour <strong>$ENV{ANSI_COLORS_DISABLED}</strong></p>

<p>for sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, What is it?]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/03/11/app-midgen-001/"/>
    <updated>2013-03-11T13:59:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/03/11/app-midgen-001</id>
    <content type="html"><![CDATA[<p>This is an aid to present a packages module requirements by scanning the package, then displaying in a familiar format with the current version number from CPAN.</p>

<p>This started out as a way of generating the core for a Module::Install::DSL Makefile.PL, why DSL because it&rsquo;s nice and clean, so now you can generate the contents and check when you want, yes it&rsquo;s another PPI powered app.</p>

<!-- more -->


<p>All output goes to STDOUT, so you can use it as you see fit.</p>

<p>CPAN Version Number Displayed</p>

<ul>
<li>NN.nnnnnn we got the current version number from CPAN (numify)</li>
<li><strong>undef</strong> no version number returned by CPAN</li>
<li><strong>core</strong> indicates the module is a perl core module</li>
<li><strong>!cpan</strong> must be local, one of yours. Not in CPAN, Not in core.</li>
</ul>


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<p>We also display some other info to complement the modules we have found.</p>

<p>For more info and sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>

<p>Change to the root of the package you want to scan and run</p>

<pre><code>midgen [options]
</code></pre>

<p>&mdash;help &mdash;output &mdash;core &mdash;verbose &mdash;parent &mdash;mojo &mdash;noisy_children &mdash;twins &mdash;zero &mdash;debug</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 001]]></title>
    <link href="http://kevindawson.github.io/bowtie/2013/02/02/octopress-001/"/>
    <updated>2013-02-02T02:02:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/2013/02/02/octopress-001</id>
    <content type="html"><![CDATA[<h2>Octopress my hacks</h2>

<p>A reminder of what I hacked, and where it came from :)</p>

<!-- more -->


<h3>Links</h3>

<ul>
<li><a href="http://anchetawern.github.io/blog/2012/11/29/customizing-octopress/">Customizing Octopress</a></li>
<li><a href="http://blog.jphpsf.com/2012/06/12/squeezing-octopress-for-faster-load-times">Squeezing Octopress for Faster Load Times</a></li>
<li><a href="http://blog.orenyk.com/2013/03/08/fixing-my-octopress-config-links/">Fixing my octopress Config Links</a></li>
<li><a href="http://blog.bigdinosaur.org/using-at-font-face-with-octopress/">Using @font-face With Octopress</a></li>
<li><a href="http://blog.bigdinosaur.org/gzipping-at-font-face-with-nginx/">Gzipping @font-face With Nginx</a></li>
<li><a href="http://www.dotnetguy.co.uk/post/2012/06/25/octopress-category-list-plugin/">Category List Plug-in</a></li>
<li><a href="http://learnaholic.me/2012/10/15/octopress-seo-and-disabling-the-blog-route/">SEO and Disabling the Blog Route</a></li>
<li><a href="http://xit0.org/2013/04/remove-redundant-slash-blog-prefix-from-octopress-website/">Remove Redundant /blog Prefix From Octopress Website</a></li>
<li><a href="http://www.yatishmehta.in/seo-for-octopress">SEO for Octopress</a></li>
<li><p><a href="http://time.to.pullthepl.ug/blog/2012/8/20/octopress-top-categories-plugin/">Top Categories Plugin</a></p></li>
<li><p>Octopress</p>

<ul>
<li><a href="http://octopress.org/docs/theme/styles/">Styles</a></li>
<li><a href="http://octopress.org/docs/updating/">Updating</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
