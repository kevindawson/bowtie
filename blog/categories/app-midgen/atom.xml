<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: App-Midgen | The Musings of a Dyslexic Technologist]]></title>
  <link href="http://kevindawson.github.io/bowtie/blog/categories/app-midgen/atom.xml" rel="self"/>
  <link href="http://kevindawson.github.io/bowtie/"/>
  <updated>2013-05-17T00:23:52+01:00</updated>
  <id>http://kevindawson.github.io/bowtie/</id>
  <author>
    <name><![CDATA[kevin dawson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing App::Midgen v0.22]]></title>
    <link href="http://kevindawson.github.io/bowtie/blog/2013/05/09/app-midgen-005/"/>
    <updated>2013-05-09T19:29:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/blog/2013/05/09/app-midgen-005</id>
    <content type="html"><![CDATA[<h2>So whatâ€™s new?</h2>

<ul>
<li>Switched output format type from <strong>build</strong> to <strong>mb</strong></li>
<li>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories

<ul>
<li>Find modules in Test::Requires blocks</li>
<li>Find modules in use_ok BEGIN blocks</li>
</ul>
</li>
<li>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</li>
</ul>


<!-- more -->


<h3>Switched output format type from <strong>build</strong> to <strong>mb</strong></h3>

<pre><code>midgen -f mb
</code></pre>

<p>thanks for the kick azawawi++</p>

<h3>Extract more from <strong>t/</strong> and <strong>xt/</strong> directories</h3>

<h4>Find modules in Test::Requires blocks</h4>

<p>Examples</p>

<p><code>perl
use Test::Requires { 'Test::Pod' =&gt; 1.46 };
use Test::Requires { 'Test::Extra' =&gt; 1.46 };
use Test::Requires qw[MIME::Types];
use Test::Requires qw(IO::Handle::Util LWP::Protocol::http10);
use Test::Requires {
  "Test::Test1" =&gt; '1.01',
  'Test::Test2' =&gt; 2.02,
 };
</code></p>

<h4>Find modules in use_ok BEGIN blocks</h4>

<p>Examples</p>

<p><code>perl
BEGIN {
  use_ok( 'Term::ReadKey', '2.30' );
  use_ok( 'Term::ReadLine', '1.10' );
  use_ok( 'Fred::BloggsOne', '1.01' );
  use_ok( "Fred::BloggsTwo", "2.02" );
  use_ok( 'Fred::BloggsThree', 3.03 );
}
</code></p>

<h3>Supports <strong>suggests</strong> in <strong>on_test</strong> in cpanfile</h3>

<p>~/GitHub/Plack$ midgen -lf cpanfile</p>

<p>```text
on test => sub {</p>

<pre><code>requires 'AnyEvent',       '7.04';
requires 'Data::Dumper',   '2.145';
requires 'DooBar',         '!mcpan';
requires 'Encode',         '2.51';
requires 'File::Path',     '2.09';
requires 'File::Temp',     '0.2301';
requires 'HTTP::Cookies',  '6.01';
requires 'HTTP::Error',    '!mcpan';
requires 'IO::File',       '1.25';
requires 'IO::Socket',     '1.25';
requires 'SomeModule',     '!mcpan';
requires 'Test::Requires', '0.06';

suggests 'Authen::Simple::Passwd', '0.6';
suggests 'FCGI::ProcManager',      '0.24';
suggests 'HTTP::Request::AsCGI',   '1.2';
suggests 'IO::Handle::Util',       '0.01';
suggests 'LWP::Protocol::http10',  '6.03';
suggests 'Log::Dispatch',          '2.39';
suggests 'Log::Dispatch::Array',   '1.001';
suggests 'MIME::Types',            '1.38';
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, update notice + some colour]]></title>
    <link href="http://kevindawson.github.io/bowtie/blog/2013/04/04/app-midgen-004/"/>
    <updated>2013-04-04T20:08:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/blog/2013/04/04/app-midgen-004</id>
    <content type="html"><![CDATA[<p>Switched output format type from cfile to cpanfile</p>

<pre><code>midgen -f cpanfile
</code></pre>

<p>thanks for the kick Miyagawa++</p>

<!-- more -->


<p>nb, if you have written an <code>.midgenrc</code> file suggest you either edit it or delete it and start again, opps.</p>

<p>Thought I would show you all the colour</p>

<ul>
<li>yellow module version</li>
<li>bright-yellow dual-life module version</li>
<li>cyan module no version, so showing it&rsquo;s distribution version</li>
</ul>


<p><img src="/images/midgen_001.png"></p>

<p>All version numbers from MetaCPAN</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, now with cpanfile prereqs]]></title>
    <link href="http://kevindawson.github.io/bowtie/blog/2013/04/03/app-midgen-003/"/>
    <updated>2013-04-03T23:32:00+01:00</updated>
    <id>http://kevindawson.github.io/bowtie/blog/2013/04/03/app-midgen-003</id>
    <content type="html"><![CDATA[<h3>More features</h3>

<p><strong>cpanfile output format, prereqs (requires, recommends, on test, on develop)</strong></p>

<pre><code>midgen -lf cfile
</code></pre>

<ul>
<li>Basic scanning of Dist-Zilla Plugins</li>
</ul>


<p>Here is a sample, <a href="https://github.com/kevindawson/App-Midgen/wiki/Milla">with cpanfile and dist-zilla plugins</a>, see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a> for more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen Take two]]></title>
    <link href="http://kevindawson.github.io/bowtie/blog/2013/03/24/app-midgen-002/"/>
    <updated>2013-03-24T17:02:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/blog/2013/03/24/app-midgen-002</id>
    <content type="html"><![CDATA[<p>First I would like to say a big Thank You for all the critiques I received, here and in the channels.</p>

<p>App::Midgen</p>

<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<!-- more -->


<p>Now able to show dual-life modules current version number.
Lets start with the changes and inspiration.</p>

<ul>
<li>Switched to using MetaCPAN-API due to a write issue with CPAN, neilb++</li>
<li>Switched to using Perl-PrereqScanner to do most of the grunt work as pointed out by Mithaldu++ daxim++</li>
<li>spelling, re-factor option names, inspired by mauke++</li>
<li><code>--format</code> <em>change output format</em></li>
<li>changed default output, no extra processing, only distribution version for modules without a version number mst++</li>
</ul>


<p><em>if I missed anybody, sorry</em></p>

<p>And some new features.
Add command line option to show dual-line module versions as well.</p>

<pre><code>midgen --dual_life
</code></pre>

<p>Add ability to read/write options from ~/.midgenrc</p>

<p>Command line options always overwrite options from ~/.midgenrc if you have one.
The output format uses colour to add visualization of module version number types, be that mcpan, dual-life or added distribution.</p>

<p>We now use colour to help differentiate between the different module version number types, we also honour <strong>$ENV{ANSICOLORSDISABLED}</strong></p>

<p>for sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Midgen, What is it?]]></title>
    <link href="http://kevindawson.github.io/bowtie/blog/2013/03/11/app-midgen-001/"/>
    <updated>2013-03-11T13:59:00+00:00</updated>
    <id>http://kevindawson.github.io/bowtie/blog/2013/03/11/app-midgen-001</id>
    <content type="html"><![CDATA[<p>This is an aid to present a packages module requirements by scanning the package, then displaying in a familiar format with the current version number from CPAN.</p>

<p>This started out as a way of generating the core for a Module::Install::DSL Makefile.PL, why DSL because it&rsquo;s nice and clean, so now you can generate the contents and check when you want, yes it&rsquo;s another PPI powered app.</p>

<!-- more -->


<p>All output goes to STDOUT, so you can use it as you see fit.</p>

<p>CPAN Version Number Displayed</p>

<ul>
<li>NN.nnnnnn we got the current version number from CPAN (numify)</li>
<li><strong>undef</strong> no version number returned by CPAN</li>
<li><strong>core</strong> indicates the module is a perl core module</li>
<li><strong>!cpan</strong> must be local, one of yours. Not in CPAN, Not in core.</li>
</ul>


<p><em>Food for thought, if we update our Modules, don&rsquo;t we want our users to use the current version, so should we not by default do the same with others Modules. Thus we always show the current version number, regardless.</em></p>

<p>We also display some other info to complement the modules we have found.</p>

<p>For more info and sample output see <a href="https://github.com/kevindawson/App-Midgen/wiki">wiki</a></p>

<p>Change to the root of the package you want to scan and run</p>

<pre><code>midgen [options]
</code></pre>

<p>&mdash;help &mdash;output &mdash;core &mdash;verbose &mdash;parent &mdash;mojo &mdash;noisy_children &mdash;twins &mdash;zero &mdash;debug</p>
]]></content>
  </entry>
  
</feed>
